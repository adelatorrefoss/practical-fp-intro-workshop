* Practical Introduction to Functional Programming

As programmers, we want artifacts that are:
- Reusable
- Indepent
- Loosely coupled
- Composable
- Abstract (I don't need to know how it works to use it)
- Correct

** The language

ES6, JavaScript from the future.

*** Arrow functions

#+BEGIN_SRC javascript
var identity = function (x) { return x; }

// with arrow functions, anonymous functions can be written concisely as:

var identity = (x) => x
#+END_SRC

*** Spread operator

**** In function argument declarations

- Can only appear in the end of the args list
- Captures a variable number of arguments into an array
- No need to use the broken `arguments` object again

Some examples:
#+BEGIN_SRC javascript
((...xs) => xs)(1, 2, 3)
//=> [1, 2, 3]

((first, ...xs) => xs)(1, 2, 3)
//=> [2, 3]

((first, second, ...xs) => xs)(1, 2, 3)
//=> [3]

((first, second, third, ...xs) => xs)(1, 2, 3)
//=> []
#+END_SRC

**** For calling functions

- When we want to call a function with positional arguments but we have an array
 + in ES5 we use ~Function.prototype.apply~
 + in ES6 we can use the spread operator
- Unlinke in function arguments, we aren't restricted to use it in the end of the arglist

#+BEGIN_SRC javascript
var add5 = (a, b, c, d, e) => a + b + c + d + e

add5(...[1, 2, 3, 4, 5])
//=> 15

add5(1, ...[2, 3, 4, 5])
//=> 15

add5(1, ...[2, 3, 4], 5)
//=> 15

add5(1, ...[2, 3], 4, 5)
//=> 15
#+END_SRC

** Basics

*** What is functional programming?

- Programming with inmutable data and pure functions
- Treating functions as any other value

*** Higher-order functions

We talked about treating functions as values, so nothing is stopping us from passing them as arguments to functions or returning them.

- Any function that takes and/or returns a function is called a higher-order function
- Our ~compose~ function from before is a higher-order function

We can write a combinator for flipping a function's arguments:
#+BEGIN_SRC javascript
flip = (f) => (...args) => f(...args.reverse())
#+END_SRC

Or a decorator that logs function calls:
#+BEGIN_SRC javascript
var logged = (f) =>
    function(...args) {
        console.log("Calling " + f.name + " with " + args);
        return f(...args);
    };
#+END_SRC

Or a function that, given a key name, builds a getter for us:
#+BEGIN_SRC javascript
var pluck = (key) => (obj) => obj[key];
#+END_SRC

Or a function that, given a method name, builds a function that invokes it on an object for us:
#+BEGIN_SRC javascript
var invoke = (method) => (obj) => obj[method]();
#+END_SRC

And even a function that, given a predicate, returns the complement of it:
#+BEGIN_SRC javascript
var complement = (predicate) =>
    function(...args) {
        return !predicate(...args);
    };
#+END_SRC

**** Exercises

- Write a function that, given a number, returns a function that takes a number and adds it to the first
- Write the same function for the multiplication operation
- Write a function that, given a function, returns another function that calls to original one with all but the last argument

***** Solutions

#+BEGIN_SRC javascript
var adder = (x) => (y) => x + y

var multiplier = (x) => (y) => x * y

var callWithAllButLast = (f) => (...args) => f(...args.slice(0, -1))
#+END_SRC

*** Function Composition

- Functions can be composed together to form new functions
- A function composed of others applies them sequentially to the input
- One-argument functions are trivial to compose

#+BEGIN_SRC javascript
compose = (f, g) => (x) => f(g(x))

add1 = (x) => x + 1
mul2 = (x) => x * 2

compose(add1, mul2)(3)
//=> 7
compose(mul2, add1)(3)
//=> 8
#+END_SRC

**** Exercises

- Improve ~compose~ so the function it generates can take multiple arguments
- Write a variadic version of ~compose~

***** Solutions

#+BEGIN_SRC javascript
compose = (f, g) => (...xs) => f(g(...xs))

composeAll = (...fs) => (x) => fs.reduceRight((res, f) => f(res), x)
#+END_SRC

*** Recursion

When a function calls another in its return position is using recursion. Some problems translate very naturally to recursive solutions
but in general it's not used very much, partly because the lack of optimizations for it in modern compilers. However, ES6 brings TCO
(tail call optimization) to the language so we'll be able to write recursive functions without fear of blowing the stack.

Some people argue that recursion is a low-level operation and should be hidden behind an API.

**** Self recursion

We call a function self-recursive if it recurs on itself.

Many mathematical functions, like factorial, are intuitively implemented in this manner:
#+BEGIN_SRC javascript
var factorial = function (n) {
    if (n > 1) return n * factorial(n - 1);
    else       return n;
}

// We can also write it in an accumulator-passing style
var factorialAcc = function (n, result = 1) {
    if (n > 1) return factorialAcc(n - 1, n * result);
    else       return result;
}
#+END_SRC

**** Mutual recursion

We call a set of functions mutually recursive when they recur on each other.

Here are a couple of mutually recursive functions:
#+BEGIN_SRC javascript
var isOddRec = function (n) {
    if (n == 1) return true;
    else        return isEvenRec(n - 1);
}

var isEvenRec = function (n) {
    if (n == 1) return false;
    else        return isOddRec(n - 1);
}
#+END_SRC

***** Exercises

- Write a recursive function that, given a value and a list, returns a list with the first occurrence of the value removed
- Write the same function in accumulator-passing style

#+BEGIN_SRC javascript
var cons = (v, xs) => [v].concat(xs);

var rember = function(v, xs) {
    if (xs.length === 0)  return [];

    let head = xs[0],
        tail = xs.slice(1);

    if (head === v) return tail;
    else            return cons(head, rember(v, tail));
};

var remberAcc = function(v, xs, acc = []) {
    if (xs.length === 0)  return acc;

    let head = xs[0],
        tail = xs.slice(1);

    if (head === v) return acc.concat(tail);
    else            return remberAcc(v, tail, acc.concat([head]));
};
#+END_SRC

*** Internal & External Iteration

External iteration happens when the user explicitly iterates over a sequence, asking for each element (the ~for~ loop).
This kind of iteration doesn't usually communicate its intent very well, we must read the code and figure out what is happening in the ~for~ loop.
Furthermore, we usually iterate for doing one (or more) of the following:

 - Transforming the elements of a sequence one by one, keeping its structure
 - Filtering out the elements of the sequence that meet a certain condition
 - Transforming the whole sequence to a value
 - Performing an effect for each element of the sequence

Wouldn't it be nice to be more explicit about the intent of the iteration and stop writing those archaic ~for~ loops? We
can abstract each of the aforementioned patterns into functions and it yields a few benefits:

 - Simpler, self-explaining code
 - Ability to choose an iteration strategy suitable for each pattern (parallel vs. sequential)


We'll only cover arrays for simplicity but the described patterns work for any sequence.

**** Transformation

A transformation is the mapping of a function to every element in the sequence, preserving
its structure. Luckily, ES6 already has a ~map~ function that does what we want.

#+BEGIN_SRC javascript
[1, 2, 3].map((x) => x * x)
//=> [1, 4, 9]
#+END_SRC

Since transformations preserve the structure of the sequence, they can be chained:

#+BEGIN_SRC javascript
[1, 2, 3].map((x) => x * x)
         .map((x) => x - 1)
//=> [0, 3, 8]
#+END_SRC

**** Filtering

Filtering consists of checking every element of the sequence agains a predicate and keeping only those elements for which the predicate is true.
It does so preserving the sequence structure. Like for ~map~, arrays have a ~filter~ method:

#+BEGIN_SRC javascript
var isEven = (x) => (x % 2) === 0;

[1, 2, 3, 4].filter(isEven)
//=> [2, 4]
#+END_SRC

As with transformations, filters can be chained:

#+BEGIN_SRC javascript
var isOdd = complement(isEven);

[1, 2, 3, 4].filter(isEven)
            .filter(isOdd)
//=> []
#+END_SRC

**** Reduction

When we want to generate a value from a sequence and for that we need to visit some or all of its element, we are making a reduction.

For reducing a sequence we need a two-argument function that gets applied to every element in the collection. This function's arguments
are an accumulator for constructing the final value and a sequence element. The value that we return from the function becomes the
accumulator in the next call to it.

Let's see a simple example of ~reduce~ in action:
#+BEGIN_SRC javascript
[1, 2, 3].reduce((acc, x) => acc + x)
//=> 6
#+END_SRC

But what happens when we have an empty sequence? ~[].reduce((acc, x) => acc + x)~ throws an error, but we can provide an optional
argument that will be used as the base accumulator value so even empty sequences can be reduced.

#+BEGIN_SRC javascript
[].reduce((acc, x) => acc + x, 0)
//=> 0
#+END_SRC

We can use this trait of ~reduce~ for setting the first value of the accumulator like in the following example:
#+BEGIN_SRC javascript
[1, 2, 3].reduce((acc, x) => [x].concat(acc), [])
//=> [3, 2, 1]
#+END_SRC

**** Effects

Sometimes we need to iterate over a sequence because we need to perform a effect for each of its items. We can use the ~forEach~ function for this purpose.

Here is a contrived example of ~forEach~ usage:
#+BEGIN_SRC javascript
[1, 2, 3].forEach((i) => document.querySelector("#item-" + i).remove())
#+END_SRC

**** Putting it all together

You are probably aware by now that the structure-preserving functions that we learned to use can be chained together. We'll frequently find ourselves using more than
one of them for processing sequences of data.

#+BEGIN_SRC javascript
var people = [
    {name: "Alejandro", language: "Clojure", onHolidays: false},
    {name: "Alonso", language: "Groovy", onHolidays: false},
    {name: "Jes√∫s", language: "Python", onHolidays: false},
    {name: "Andrey", language: "Clojure", onHolidays: true}
];

// People that are on holidays
people.filter(pluck('onHolidays'));

// People that aren't on holidays
people.filter(complement(pluck('onHolidays')));

// Names of the people that aren't on holidays
people.filter(complement(pluck('onHolidays')))
      .map(pluck('name'));

// Languages that people that aren't on holidays use, on UPPERCASE
people.filter(complement(pluck('onHolidays')))
      .map(pluck('language'))
      .map(invoke('toUpperCase'));
#+END_SRC

***** Exercises

- Write your own version of ~map~, ~filter~ and ~reduce~ (you are allowed to use ~for~ loops and mutation)

****** Solutions

#+BEGIN_SRC javascript
var map = function(f, xs) {
    var result = [];

    for(let i = 0; i < xs.length; i++) {
        result.push(f(xs[i]));
    }

    return result;
};

var filter = function(p, xs) {
    var result = [];

    for(let i = 0; i < xs.length; i++) {
        let elem = xs[i];
        if (p(elem)) result.push(elem);
    }

    return result;
};

var reduce = function(rf, xs, maybeAcc) {
    if (maybeAcc === undefined) {
        if (xs.length === 0) {
            throw TypeError("reduce of empty array with no initial value");
        }

        acc = xs[0];
        arr = xs.slice(1);
    } else {
        acc = maybeAcc;
        arr = xs;
    }

    for(let i = 0; i < arr.length; i++) {
        acc = rf(acc, arr[i]);
    }

    return acc;
};
#+END_SRC


*** Currying & Partial Application

So far, we've seen a way to form new functions out of existing ones: function composition. However, this is less than ideal since we can't
generate new functions by specifying only some of its arguments. The techniques we'll cover now will allow us to do so.

***** Currying

A curried function is one that only takes one parameter, and it may return a value or another function. We can convert any function to a curried function.

For example, let's see how a curried function that sums three numbers would look like:

#+BEGIN_SRC javascript
var curriedSum3 = (x) => (y) => (z) => x + y + z;

curriedSum3(1)(2)(3)
//=> 6
#+END_SRC

***** Partial application

Partial application is related to currying but is not exactly the same. It means that we specify part of the arguments to a function and we
get a new one that only expects the ones that are missing.

Let's write the counterpart of our ~pluck~ function and see how we can use ~Function.prototype.bind~ for partial application:
#+BEGIN_SRC javascript
var setter = function(key, val, obj){
    obj[key] = val;
    return obj;
};

// We partially apply setter with "happy" (key) and true (val) and we get a function back
var cheer = setter.bind(null, 'happy', true);

cheer({name: "Alejandro"})
//=> {name: "Alejandro", happy: true}
#+END_SRC

****** Final exercise

- Write a function that takes a function that we know takes positional arguments and returns another function that accepts as many parameters as
  the first one but, when not supplying enough of them, returns another function. Try to apply some of the concepts learned today.

******** Solution

#+BEGIN_SRC javascript
var autoCurry = function(f, argsAcc = [], remaining = f.length) {
    return function(...args){
        let allArgs = argsAcc.concat(args);

        if (args.length >= remaining) return f(...allArgs);
        else                          return autoCurry(f, allArgs, remaining - args.length)
    }
};
#+END_SRC

** What's next

- Start applying these techniques in your programs
- Learn a lazy, purely functional, statically typed language like Haskell
- Learn a dynamic functional language like Clojure
